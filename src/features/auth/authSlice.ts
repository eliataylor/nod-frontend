import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { RootState } from '../../app/store'
import { AuthState } from './interfaces'
import { refreshAccessToken } from './authAPI'

const initialState: AuthState = {
    status: 'idle',
    refreshToken: '',
    accessToken: '',
    accessTokenExpiration: '',
    user: null,
    isTokenExpired: false,
}

// Async function for uploading the sequences.
export const refreshToken = createAsyncThunk(
    'auth/refreshToken',
    async (_, { getState }) => {
        const state = getState() as RootState
        const response = await refreshAccessToken(state.auth?.refreshToken)
        return response.data
    }
)

export const authSlice = createSlice({
    name: 'auth',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        resetAuthData: (state) => {
            state.status = 'idle'
            state.user = null
            state.refreshToken = ''
            state.accessToken = ''
            state.accessTokenExpiration = ''
            state.isTokenExpired = false
        },
        setAuthData: (state, action) => {
            state.user = action.payload.user
            state.accessToken = action.payload.access_token
            state.refreshToken = action.payload.refresh_token
        },
        setUserData: (state, action) => {
            state.user = action.payload
        },
        updateAccessToken: (state, action) => {
            if (state.user) {
                state.accessToken = action.payload.accessToken
                state.accessTokenExpiration =
                    action.payload.accessTokenExpiration
                state.isTokenExpired = false
            }
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(refreshToken.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(refreshToken.rejected, (state) => {
                // Here we reset auth info. to force a redirect to auth/login.
                // @todo It would be nice to display a message to the user that their session has expired.
                state.isTokenExpired = true
                state.status = 'idle'
                state.refreshToken = ''
                state.accessToken = ''
                state.accessTokenExpiration = ''
                state.user = null
            })
            .addCase(refreshToken.fulfilled, (state, action) => {
                state.status = 'idle'
                if (state.user) {
                    state.accessToken = action.payload.access
                    state.accessTokenExpiration =
                        action.payload.access_token_expiration
                    state.isTokenExpired = false
                }
            })
    },
})

export const { resetAuthData, setAuthData, updateAccessToken, setUserData } =
    authSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAuth = (state: RootState) => state.auth

export default authSlice.reducer
